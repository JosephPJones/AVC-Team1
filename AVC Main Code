#include <stdio.h>
#include <math.h>
#include <algorithm>
#include <time.h>
#include "E101.h"

using namespace std;
int whitePoints;
double lineCenter;
double kp;
double kd;
double kScale = 0.3;
int quadrant = 1;
int power;
int powerScale = 45;
double turning;
int turnBoost = 50;

void updateCamera(int row){
	int maxBright = 0;
	int minBright = 0;
	int pixel[320];
	lineCenter = whitePoints = 0;
	for(int step = 0; step < 320; step++){
		char p = get_pixel(row, step,3);
		maxBright = max(maxBright, (int)p);
		minBright = min(minBright, (int)p);
		pixel[step] = p;
	}
	int threshold = (maxBright - minBright) / 2;	
	int whitePoints = 0;
	int sum = 0;
	for(int step = 0; step < 320; step++){
		if (pixel[step] > threshold){
			set_pixel(row, step, 0, 128, 128);
			whitePoints++;
			sum += step;
		}
	}
	if (whitePoints > 0){
		lineCenter = ((sum/whitePoints) - 160.0)/160.0;
		set_pixel(row, (int)(sum/whitePoints), 255, 0, 0);
		set_pixel(row - 1, (int)(sum/whitePoints), 0, 255, 0);		
		set_pixel(row + 1, (int)(sum/whitePoints), 0, 0, 255);
		printf("center:%f points:%d\n",lineCenter, whitePoints);
	}
	if (lineCenter>0){
		set_pixel(2,2,255,0,0);
		set_pixel(2,3,255,0,0);
		set_pixel(2,4,255,0,0);
		set_pixel(3,2,255,0,0);
		set_pixel(3,3,255,0,0);
		set_pixel(3,4,255,0,0);
		set_pixel(4,2,255,0,0);
		set_pixel(4,3,255,0,0);
		set_pixel(4,4,255,0,0);
	}
	
}

void setMotors(double dir, int pow){//direction
	power+=(int)((fabs(dir))*turnBoost);
	power = min(max(pow, -254), 254);
	turning = min(max(dir, -(double)1), (double)1);
	turning = (fabs(dir)>(kScale/10)? turning : 0);
	double p1 =  power * min(1 + (2 * turning), (double)1);
	double p2 =  -power * min(1 - (2 * turning), (double)1);
	set_motor(1, p1);
	set_motor(2, p2);
	printf("p1:%.1f p2:%.1f\n\n", p1, -p2);
}

void followLine(int dftRow){
	take_picture();
	updateCamera(dftRow);
	kp = -lineCenter;
	setMotors(kp*kScale - 0*kd, powerScale);
	update_screen();
	sleep1(0,100000);
}

void doQuadrantOne(){
	char server_addr[15] = "130.195.6.196";
	int port= 1024;	
	connect_to_server(server_addr, port);
	char message[24] = "Please";
	send_to_server(message);
	receive_from_server(message);
	printf("%s\n", message);
	send_to_server(message);
	quadrant++;
}

void doQuadrantTwo(int dftRow){
	//updateCamera(60);
	//kd = (lineCenter - firstPoint - 160)/160;
	followLine(dftRow);
	if (whitePoints > 300)
		//quadrant++;
	update_screen();
}

void doQuadrantThree(){
	take_picture();
	updateCamera(120);
	if (whitePoints > 100){	//check if line is wide (possibly an intersection.)
		if (lineCenter > 0){for(int i = 1; i < 30; i++){ doQuadrantTwo(120);}} //take the turn if intersection has right turn
		else{for(int i = 1; i < 30; i++){ doQuadrantTwo(120);}} // keep going if intersection has leftTurn
	}
}

void doQuadrantFour(){
		
} 
 
int main(){	
	init();
	open_screen_stream();
	for(int i =0; i<150; i++){
	//while (quadrant <= 4){//temp
		switch(quadrant){
			case 1:{doQuadrantOne(); break;}
			case 2:{doQuadrantTwo(120); break;}
			case 3:{doQuadrantThree(); break;}
			case 4:{doQuadrantFour(); break;}
		}
	}	
	stop(0);
	return 0;
}
